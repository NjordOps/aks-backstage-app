image:
  repository: ""
  tag: ""
  pullPolicy: IfNotPresent

replicaCount: 1

service:
  type: ClusterIP
  port: 7007

serviceAccount:
  create: true
  name: ""

podSecurityContext: {}
  # fsGroup: 10001

securityContext: {}
  # runAsUser: 10001
  # runAsNonRoot: true

resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 250m
    memory: 512Mi

livenessProbe:
  enabled: true
  httpGet:
    path: /healthcheck
    port: 7007
  initialDelaySeconds: 20
  periodSeconds: 10
  failureThreshold: 6

readinessProbe:
  enabled: true
  httpGet:
    path: /healthcheck
    port: 7007
  initialDelaySeconds: 10
  periodSeconds: 10
  failureThreshold: 6

hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70

ingress:
  enabled: true
  className: nginx
  hosts:
    - host: backstage.njordops.net
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: backstage-tls
      hosts:
        - backstage.njordops.net

env:
  # Only for local testing. In production, prefer secretEnv to mount from Secret
  BACKEND_SECRET: ""
  POSTGRES_HOST: "postgres"
  POSTGRES_PORT: "5432"
  POSTGRES_USER: "backstage"
  POSTGRES_PASSWORD: "backstage"
  GITHUB_CLIENT_ID: ""
  GITHUB_CLIENT_SECRET: ""
  GITHUB_TOKEN: ""
  GITHUB_ALLOWED_ORGS: ""

secretEnv:
  enabled: true
  name: backstage-env

postgres:
  enabled: true
  storage: 10Gi
  image: postgres:14
  password: backstage

imagePullSecrets:
  - name: acr-pull

tls:
  create: false
  existingSecretName: backstage-tls

acr:
  createPullSecret: false

