name: Backstage CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY_LOGIN_SERVER: maxregistry.azurecr.io
  IMAGE_NAME: backstage
  CHART_PATH: deploy/HELM
  RELEASE_NAME: backstage

jobs:
  build_and_test:
    name: Lint, Test, and Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Enable Corepack (Yarn)
        run: corepack enable

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Typecheck
        run: yarn tsc

      - name: Lint
        run: yarn lint:all

      - name: Test
        run: yarn test

      - name: Build all packages
        run: yarn build:all

      - name: Upload backend bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: |
            packages/backend/dist/**

  build_and_push_image:
    name: Build and Push Image to ACR
    needs: build_and_test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Enable Corepack (Yarn)
        run: corepack enable

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Download backend bundle artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: packages/backend/dist

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure Container Registry login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Compute image tags
        id: vars
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          if [ "${GITHUB_REF_TYPE}" = "branch" ] && [ "${GITHUB_REF_NAME}" = "master" ]; then
            echo "latest_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "latest_tag=" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        run: |
          docker build . \
            -f packages/backend/Dockerfile \
            -t $REGISTRY_LOGIN_SERVER/$IMAGE_NAME:${{ steps.vars.outputs.sha_tag }}
          if [ -n "${{ steps.vars.outputs.latest_tag }}" ]; then
            docker tag $REGISTRY_LOGIN_SERVER/$IMAGE_NAME:${{ steps.vars.outputs.sha_tag }} \
              $REGISTRY_LOGIN_SERVER/$IMAGE_NAME:${{ steps.vars.outputs.latest_tag }}
          fi

      - name: Push Docker image
        run: |
          docker push $REGISTRY_LOGIN_SERVER/$IMAGE_NAME:${{ steps.vars.outputs.sha_tag }}
          if [ -n "${{ steps.vars.outputs.latest_tag }}" ]; then
            docker push $REGISTRY_LOGIN_SERVER/$IMAGE_NAME:${{ steps.vars.outputs.latest_tag }}
          fi

      - name: Set image output
        id: image
        run: echo "image=$REGISTRY_LOGIN_SERVER/$IMAGE_NAME:${{ steps.vars.outputs.sha_tag }}" >> $GITHUB_OUTPUT

      - name: Write image ref file
        run: |
          echo "${{ steps.image.outputs.image }}" > image.txt

      - name: Upload image ref artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-ref
          path: image.txt
          
  deploy:
    name: Deploy to AKS via Helm
    needs: build_and_push_image
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: max
          cluster-name: max-demo

      - name: Download image ref artifact
        uses: actions/download-artifact@v4
        with:
          name: image-ref

      - name: Read image ref
        id: img
        run: echo "image=$(cat image.txt)" >> $GITHUB_OUTPUT

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Prepare namespace for Helm ownership
        run: |
          kubectl get ns backstage >/dev/null 2>&1 || kubectl create ns backstage
          kubectl label ns backstage app.kubernetes.io/managed-by=Helm --overwrite
          kubectl annotate ns backstage meta.helm.sh/release-name=backstage --overwrite
          kubectl annotate ns backstage meta.helm.sh/release-namespace=backstage --overwrite
          # ensure image pull secret exists
          kubectl -n backstage create secret docker-registry acr-pull \
            --docker-server=${{ env.REGISTRY_LOGIN_SERVER }} \
            --docker-username='${{ secrets.ACR_USERNAME }}' \
            --docker-password='${{ secrets.ACR_PASSWORD }}' \
            --dry-run=client -o yaml | kubectl apply -f -
          # ensure app secret exists for env consumption
          kubectl -n backstage create secret generic backstage-env \
            --from-literal=BACKEND_SECRET='${{ secrets.BACKEND_SECRET }}' \
            --from-literal=POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=GITHUB_CLIENT_SECRET='${{ secrets.GITHUB_CLIENT_SECRET }}' \
            --from-literal=GITHUB_TOKEN='${{ secrets.GITHUB_TOKEN }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm upgrade
        run: |
          IMAGE_REPO=$(echo "${{ steps.img.outputs.image }}" | cut -d':' -f1)
          IMAGE_TAG=$(echo "${{ steps.img.outputs.image }}" | cut -d':' -f2)
          helm upgrade --install $RELEASE_NAME $CHART_PATH \
            --namespace backstage \
            --create-namespace \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            --set ingress.className=nginx \
            --set env.GITHUB_CLIENT_ID='${{ secrets.GITHUB_CLIENT_ID }}' \
            --set acr.createPullSecret=false \
            --set tls.create=false
            