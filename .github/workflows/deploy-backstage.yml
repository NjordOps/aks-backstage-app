name: Build and Deploy Backstage

on:
  push:
    branches: [ "master" ]

env:
  REGISTRY: ${{ vars.ACR_LOGIN_SERVER }}
  IMAGE_NAME: aks-backstage-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Build image in ACR (no local Docker needed)
        uses: azure/cli@v2
        with:
          azcliversion: 2.63.0
          inlineScript: |
            az acr build \
              --registry ${{ vars.ACR_NAME }} \
              --image $REGISTRY/$IMAGE_NAME:${{ github.sha }} \
              .

      - name: Set image tag
        id: vars
        run: echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Upload Helm values
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: deploy/HELM

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ vars.AKS_RG }}
          cluster-name: ${{ vars.AKS_NAME }}

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Helm upgrade/install
        run: |
          # ensure namespace exists
          kubectl create namespace backstage --dry-run=client -o yaml | kubectl apply -f -

          # create/update acr pull secret from username/password
          kubectl -n backstage create secret docker-registry acr-pull \
            --docker-server=${{ vars.ACR_LOGIN_SERVER }} \
            --docker-username='${{ secrets.ACR_USERNAME }}' \
            --docker-password='${{ secrets.ACR_PASSWORD }}' \
            --dry-run=client -o yaml | kubectl apply -f -

          helm upgrade --install backstage deploy/HELM \
            --namespace backstage --create-namespace \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set ingress.className=nginx \
            --set env.BACKEND_SECRET='${{ secrets.BACKEND_SECRET }}' \
            --set env.POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --set env.GITHUB_CLIENT_ID='${{ secrets.GITHUB_CLIENT_ID }}' \
            --set env.GITHUB_CLIENT_SECRET='${{ secrets.GITHUB_CLIENT_SECRET }}' \
            --set env.GITHUB_TOKEN='${{ secrets.GITHUB_TOKEN }}' \
            --set acr.createPullSecret=false \
            --set tls.create=false

